/* 
Both Flexbox and css grid has its own importance and should be used
for designing a web page.

Grid works for 2 dimensional aligment wheras flexbox is usually for
one dimensional which means even if you increase height, it will
increase and adjust it height max to the height of the row, which is not in 
case of grids because you can modify things for multiple rows
along horizontal and vertical so thats why grids are two DIMENSIONAL

Flexbox is good for space distribution 
*/

.grid-container {
  background-color: yellow;
  height: 90vh;
  width: 90vw;
  padding: 20px;
  display: grid;
  /* display: grid will make child take full width of the container; */

  display: inline-grid;
  /* display: inline-grid will make child take only the actual width of the child; */

  grid-template-columns: 200px auto 400px;
  /* grid-template-columns helps us to set the indiviual column width 
   so in grid-template-columns: 200px auto 400px => 200px is the width of 
   first column, and auto tells that second column to set automatic width
   that looks good and third column width is 400px.
   We can also give the dimensions in percentage
  */

  grid-template-rows: 75% auto 70px;
  /* grid-template-columns helps us to set the indiviual row height
   so in grid-template-rows: 75% auto 70px => 75% is the height of 
   first row of its parent, and auto tells that second row to set automatic height
   that looks good and third row height is 70px.
   We can also give the dimensions in percentage
  */

  grid-template-columns: 200px 200px 200px;
  grid-template-rows: 200px 100px 200px;

  column-gap: 20px;
  /* Gives the gap between columns */

  row-gap: 20px;
  /* Gives the gap between rows */

  justify-content: start;
  justify-content: end;
  justify-content: center;
  justify-content: space-evenly;
  justify-content: space-around;
  justify-content: space-between;
  /* justify-content in grid is similar to that in flex, 
  it is used to align content along horizontal direction
  using the above values; 
  
  Adding justify content will also make sure that grid child
  width will be its width, instead of the container width*/

  align-content: start;
  align-content: end;
  align-content: center;
  align-content: space-evenly;
  align-content: space-around;
  align-content: space-between;
  /* align-content in grid is similar to that in flex, 
  it is used to align content along vertical direction
  using the above values;
  Adding align-content will also make sure that grid child
  height will be its height, instead of the container height*/
}

.grid-child {
  background-color: tomato;
  padding: 20px;
  border: 1px solid black;
  text-align: center;
}

/* The properties that can be applied on grid-child are

grid-column, grid-row, grid-area */

/* Grid Lines
• The lines between columns are called column lines.
• The lines between rows are called row lines. */

#grid-child-one {
  grid-column-start: 1;
  grid-column-end: 3;
  /* short hand property for above is */
  grid-column: 1/3;
  /* column-line-1 to column-line-3 */

  grid-column: 1 / span 2;
  /* column-line-1 to span 2 (combine two columns from column-line-1) */
}

#grid-child-three {
  grid-row-start: 2;
  grid-row-end: 4;
  /* short hand property for above is */
  grid-row: 2/4;
  /* row-line-2 to row-line-4 */

  grid-row: 2 / span 2;
  /* row-line-2 to span 3 (combine two rows from row-line-2) */
}

#grid-child-four {
  grid-area: 2/2/4/4;
  /* syntax for grid-area is 
  grid-area: 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end';
   */

  grid-area: 2/2 / span 2 / span 2;
}
